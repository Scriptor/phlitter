(def rest-api "http://api.twitter.com/1/")
(def search-api "http://search.twitter.com/")

(fn call-api (type action params)
  (json-decode (file-get-contents (. type action "?" (http-build-query params))) TRUE))

(fn call-rest (action params)
  (call-api rest-api action params))

(fn call-search (action params)
  (call-api search-api action params))

(fn timeline-for (screen-name [c 3])
  (call-rest "statuses/user_timeline.json"
            {"screen_name" screen-name
             "count" c
             "exclude_replies" TRUE}))

(fn search (query [result-type "recent"] [rpp 5])
  (call-search "search.json"
               {"q" query
                "result_type" result-type
                "rpp" rpp}))

(fn print-tweet (tweet)
  (print* "TWEET: " (:tweet "text") "\n\n"))

(fn print-tweets (tweets)
  (map #print-tweet tweets))

(fn show-header (s)
  (prn s)
  (prn (str-repeat "=" (strlen s))))

(let [screen-name "nasa"
      timeline (timeline-for screen-name 10)
      search-results (:(search "#clojure") "results")]
  (show-header "SEARCH RESULTS FOR #CLOJURE")
  (print-tweets search-results)
  (show-header "TWEETS BY NASA")
  (print-tweets timeline))
